// Mocks generated by Mockito 5.4.0 from annotations
// in parking_system/test/common/bottom_button_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:parking_system/blocs/car_bloc.dart' as _i2;
import 'package:parking_system/blocs/parking_lot_bloc.dart' as _i3;
import 'package:parking_system/models/bay_model.dart' as _i9;
import 'package:parking_system/models/car_parking_model.dart' as _i5;
import 'package:parking_system/models/parking_model.dart' as _i7;
import 'package:parking_system/repository/car_parking_repo.dart' as _i6;
import 'package:parking_system/repository/parking_repo.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCarParkingState_0 extends _i1.SmartFake
    implements _i2.CarParkingState {
  _FakeCarParkingState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeParkingLotState_1 extends _i1.SmartFake
    implements _i3.ParkingLotState {
  _FakeParkingLotState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CarParkingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarParkingBloc extends _i1.Mock implements _i2.CarParkingBloc {
  MockCarParkingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CarParkingState get initialState => (super.noSuchMethod(
        Invocation.getter(#initialState),
        returnValue: _FakeCarParkingState_0(
          this,
          Invocation.getter(#initialState),
        ),
      ) as _i2.CarParkingState);

  @override
  _i2.CarParkingState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCarParkingState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.CarParkingState);

  @override
  _i4.Stream<_i2.CarParkingState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.CarParkingState>.empty(),
      ) as _i4.Stream<_i2.CarParkingState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void assignPrefilledCar(
          List<_i5.CarParkingModel>? carParkingListFromParkingbloc) =>
      super.noSuchMethod(
        Invocation.method(
          #assignPrefilledCar,
          [carParkingListFromParkingbloc],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void assignParkingSpace(_i6.CarParkingDetailsParams? params) =>
      super.noSuchMethod(
        Invocation.method(
          #assignParkingSpace,
          [params],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteParkingSpace(_i6.CarParkingUnassignParams? params) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteParkingSpace,
          [params],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void assignCarparkingSpace(_i7.ParkingLot? parkingLot) => super.noSuchMethod(
        Invocation.method(
          #assignCarparkingSpace,
          [parkingLot],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void carParkingRepositoryVariable(_i6.CarParkingRepository? mockRepository) =>
      super.noSuchMethod(
        Invocation.method(
          #carParkingRepositoryVariable,
          [mockRepository],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(_i2.CarParkingEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.CarParkingEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.CarParkingState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i2.CarParkingEvent>(
    _i8.EventHandler<E, _i2.CarParkingState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i8.Transition<_i2.CarParkingEvent, _i2.CarParkingState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i8.Change<_i2.CarParkingState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ParkingLotBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockParkingLotBloc extends _i1.Mock implements _i3.ParkingLotBloc {
  MockParkingLotBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ParkingLotState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeParkingLotState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.ParkingLotState);

  @override
  _i4.Stream<_i3.ParkingLotState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.ParkingLotState>.empty(),
      ) as _i4.Stream<_i3.ParkingLotState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void getParkingLot() => super.noSuchMethod(
        Invocation.method(
          #getParkingLot,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.CarParkingModel> getfilledParkingSlot() => (super.noSuchMethod(
        Invocation.method(
          #getfilledParkingSlot,
          [],
        ),
        returnValue: <_i5.CarParkingModel>[],
      ) as List<_i5.CarParkingModel>);

  @override
  void updateBayModelList(List<_i5.CarParkingModel>? list) =>
      super.noSuchMethod(
        Invocation.method(
          #updateBayModelList,
          [list],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i9.BayModel> getListOfBayModel() => (super.noSuchMethod(
        Invocation.method(
          #getListOfBayModel,
          [],
        ),
        returnValue: <_i9.BayModel>[],
      ) as List<_i9.BayModel>);

  @override
  void carParkingRepositoryVariable(_i10.ParkingRepo? mockRepository) =>
      super.noSuchMethod(
        Invocation.method(
          #carParkingRepositoryVariable,
          [mockRepository],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(_i3.ParkingLotEvents? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.ParkingLotEvents? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.ParkingLotState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.ParkingLotEvents>(
    _i8.EventHandler<E, _i3.ParkingLotState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i8.Transition<_i3.ParkingLotEvents, _i3.ParkingLotState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i8.Change<_i3.ParkingLotState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
